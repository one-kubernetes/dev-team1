steps:
- bash: |
    cd $(projectName)
    docker build \
        -t $(registryServerName)/$(imageName):$(imageTag) \
        .
  failOnStderr: true
  displayName: 'docker build'
- bash: |
    echo '$(registryPassword)' | docker login \
        $(registryServerName) \
        -u $(registryLogin) \
        --password-stdin
  condition: succeeded()
  displayName: 'docker login'
- bash: |
    docker push $(registryServerName)/$(imageName):$(imageTag)
  failOnStderr: true
  condition: succeeded()
  displayName: 'docker push'
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    cd charts/$(projectName)
    sed -i 's/\$\$HELMVERSION\$\$/$(helmChartVersion)/g' Chart.yaml
    sed -i 's/\$\$APPVERSION\$\$/$(imageTag)/g' Chart.yaml
    sed -i 's/\$\$IMAGENAME\$\$/$(registryServerName)\/$(imageName)/g' values.yaml
    helm package --version $(helmChartVersion) --app-version $(imageTag) .
  failOnStderr: true
  displayName: 'helm package'
- bash: |
    cd charts/$(projectName)
    curl --data-binary "@$(projectName)-$(helmChartVersion).tgz"  http://20.93.169.137:8080/api/charts
  failOnStderr: false
  name: helmPush
  condition: succeeded()
  displayName: 'helm push'
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  # condition: succeeded()
